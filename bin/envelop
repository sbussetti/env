#!/bin/bash

# requires coreutils (brew install coreutils)

findgitroot() {
  local path=$1;
  while [[ $path != / ]];
  do
    local envname=$(basename $(git -C $path rev-parse --show-toplevel))
    if [[ $envname == "env" ]]; then
      echo $path;
      break;
    fi
    # Note: if you want to ignore symlinks, use "$(realpath -s "$path"/..)"
    path="$(readlink -f "$path"/..)"
  done
}

collect() {
  # (recursively) copy all files in $HOME that match files already in this project
  for F in $PROJFILES; do
    if [[ -e "$HOME/$F" ]] && [[ $(diff -q "$HOME/$F" "$PROJROOT/$F") ]]; then
      if [ $INTERACTIVE ]; then
        echo -e "> $HOME/$F\n< $PROJROOT/$F"
        diff "$HOME/$F" "$PROJROOT/$F"
        read -p "Continue? (n)/[y]: " yn;
        case $yn in
          "" ) ;;
          [Yy] ) ;;
          [Nn] ) continue;;
          * ) echo "Please answer [y]es or [n]o.";;
        esac
      fi 
      cp -v "$HOME/$F" "$PROJROOT/$F";
    fi
  done
}

restore() {
  for D in $PROJDIRS; do
    [[ -d "$HOME/$D" ]] || mkdir -v $HOME/$D
  done

  local CONTINUE;

  for F in $PROJFILES; do
    if [[ ! -e "$HOME/$F" ]] || [[ $(diff -q "$HOME/$F" "$PROJROOT/$F") ]]; then
      if [ $INTERACTIVE ]; then
        echo -e "> $HOME/$F\n< $PROJROOT/$F"
        diff "$PROJROOT/$F" "$HOME/$F" 
        read -p "Continue? (n)/[y]: " yn;
        case $yn in
          "" ) ;;
          [Yy] ) ;;
          [Nn] ) continue;;
          * ) echo "Please answer [y]es or [n]o.";;
        esac
      fi 
      cp -v "$PROJROOT/$F" "$HOME/$F";
    fi
  done
}


help() {
  echo "
  $SCRIPTNAME [options] [action(s)]

    options
      -i:       interactive mode
      -h:       displays this message

    actions
      collect:  collect env
      restore:  restore env
  "
}



SCRIPTNAME=$(basename $0)
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
PROJROOT=$(findgitroot $(dirname $SCRIPTPATH));
PROJDIRS=$(find $PROJROOT -type d \( ! -ipath "*.git*" ! -iname "env" \) | xargs realpath --relative-to $PROJROOT);
PROJFILES=$(find $PROJROOT -type f \( ! -iname .DS_Store ! -ipath "*.git/*" ! -iname .gitignore ! -iname .gitmodules ! -iname README* ! -iname *.sw* ! -iname $SCRIPTNAME \) | xargs realpath --relative-to $PROJROOT);

if [[ $# -eq 0 ]]; then
  help
  exit 1
fi

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
  -i|--interactive)
    INTERACTIVE=YES
    shift # past argument
  ;;
  -h|--help)
    help;
    shift # past argument
  ;;
  collect)
    collect
    shift
  ;;
  restore)
    restore
    shift
  ;;
  # -e|--extension)
  # EXTENSION="$2"
  # shift # past argument
  # shift # past value
  # ;;
  # --default)
  # DEFAULT=YES
  # shift # past argument
  # ;;
  *)    # unknown option
  POSITIONAL+=("$1") # save it in an array for later
  shift # past argument
  ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters
